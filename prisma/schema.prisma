// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  image           String?
  createdAt       DateTime         @default(now())
  tasks           UserTask[]
  taskMessages    TaskMessage[]
  projects        UserProjct[]
  projectMessages ProjectMessage[]
}

model Task {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  effort      Int // Esfuerzo
  createdAt   DateTime      @default(now())
  estimateAt  DateTime
  finishedAt  DateTime?
  isComplete  Boolean
  users       UserTask[]
  messages    TaskMessage[]
}

model UserTask {
  User   User @relation(fields: [userId], references: [id])
  userId Int
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  @@id([userId, taskId])
}

model TaskMessage {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
}

model Project {
  id        Int              @id @default(autoincrement())
  name      String
  state     String           @default("start") // (Start, Approval, Execution or Finished)
  createdAt DateTime         @default(now())
  users     UserProjct[]
  messages  ProjectMessage[]
  approval  Approval?
}

model UserProjct {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  role      String

  @@id([userId, projectId])
}

model ProjectMessage {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
}

model Approval {
  id                  Int          @id @default(autoincrement())
  voteToAdvanceAdmin  Boolean      @default(false)
  voteToAdvanceClient Boolean      @default(false)
  state               String       @default("proposal") // (Proposal, Resources or Recruitment)
  project             Project      @relation(fields: [projectId], references: [id])
  projectId           Int          @unique
  proposal            Proposal?
  resources           Resources?
  recruitment         Recruitment?
}

model Proposal {
  id         Int      @id @default(autoincrement())
  problema   String?
  solution   String?
  approval   Approval @relation(fields: [approvalId], references: [id])
  approvalId Int      @unique
}

model Resources {
  id              Int      @id @default(autoincrement())
  numberOfMembers Int?
  totalBudget     BigInt?
  currentBudget   BigInt?
  approval        Approval @relation(fields: [approvalId], references: [id])
  approvalId      Int      @unique
}

model Recruitment {
  id                     Int      @id @default(autoincrement())
  currentNumberOfMembers Int?
  approval               Approval @relation(fields: [approvalId], references: [id])
  approvalId             Int      @unique
}

model Execution {
  id     Int     @id @default(autoincrement())
  phases Phase[]
}

model Phase {
  id          Int       @id @default(autoincrement())
  name        String
  isCurrent   Boolean   @default(false)
  isComplete  Boolean   @default(false)
  Execution   Execution @relation(fields: [executionId], references: [id])
  executionId Int
}

model Invoices {
  id        Int      @id @default(autoincrement())
  name      String
  price     BigInt
  createdAt DateTime @default(now())
}
